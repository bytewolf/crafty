#!/usr/bin/env perl

use strict;
use warnings;

my $root;
use Config;

BEGIN {
    use File::Basename ();
    use File::Spec     ();
    $root = File::Spec->catfile(File::Basename::dirname(__FILE__), '..');

    unshift @INC, "$root/perl5/lib/perl5"                   if -d "$root/perl5";
    unshift @INC, "$root/perl5/lib/perl5/$Config{archname}" if -d "$root/perl5";
    unshift @INC, "$root/lib";
}

use Plack::Runner;
use Plack::Builder;
use Plack::App::EventSource;
use Plack::App::File;
use Getopt::Long;
use Crafty;
use Crafty::Log;
use Crafty::Config;
use Crafty::EventBus;
use Crafty::PubSub;

my $opt_base   = 'data';
my $opt_config = 'data/config.yml';
my $opt_listen;
my $opt_verbose;
GetOptions(
    'config=s' => \$opt_config,
    'base=s'   => \$opt_base,
    'listen=s' => \$opt_listen,
    'verbose'  => \$opt_verbose,
) or die("Error in command line arguments\n");

Crafty::Log->init(verbose => 1) if $opt_verbose;

my $config = Crafty::Config->new(root => $root, base => $opt_base);
$config->load($opt_config);

$opt_listen //= $config->config->{listen} // '127.0.0.1:5000';
$config->config->{listen} //= $opt_listen;

Crafty::PubSub->instance->own->address($opt_listen);

my $app = Crafty->new(config => $config, root => $root);

my $w;
$w = AE::signal HUP => sub {
    warn "Exiting gracefully (waiting for everything to finish)...\n";

    sleep 2;
    undef $w;

    kill 'QUIT', $$;

    sleep 5;

    kill 'TERM', $$;
};

my $psgi = builder {
    mount '/' => builder {
        enable_if { $_[0]->{REMOTE_ADDR} eq '127.0.0.1' }
        'Plack::Middleware::ReverseProxy';

        enable "Plack::Middleware::Static",
          path => qr{^/(img|js|css|fonts)/},
          root => "$root/public";

        enable "HTTPExceptions", rethrow => 1;

        #enable "AccessLog", format => "combined";

        return $app->to_psgi;
    };
};

warn "Listening on $opt_listen ($$)\n";

my $runner = Plack::Runner->new;
$runner->parse_options(
    '-s' => 'Twiggy',
    '-E' => 'production',
    '-l' => $opt_listen
);
$runner->run($psgi);
